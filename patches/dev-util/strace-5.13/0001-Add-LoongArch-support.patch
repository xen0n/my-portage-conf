From fdf20b583d2bf5da46f2b324a72aae8ed9c8022b Mon Sep 17 00:00:00 2001
From: WANG Xuerui <git@xen0n.name>
Date: Tue, 10 Aug 2021 00:11:17 +0800
Subject: [PATCH] Add LoongArch support

---
 NEWS                                     |  1 +
 configure.ac                             |  5 ++++
 src/Makefile.am                          | 10 ++++++++
 src/linux/loongarch64/arch_regs.c        | 11 +++++++++
 src/linux/loongarch64/get_error.c        | 19 ++++++++++++++++
 src/linux/loongarch64/get_scno.c         | 14 ++++++++++++
 src/linux/loongarch64/get_syscall_args.c | 19 ++++++++++++++++
 src/linux/loongarch64/ioctls_arch0.h     |  1 +
 src/linux/loongarch64/ioctls_inc0.h      |  1 +
 src/linux/loongarch64/raw_syscall.h      | 29 ++++++++++++++++++++++++
 src/linux/loongarch64/set_error.c        | 20 ++++++++++++++++
 src/linux/loongarch64/set_scno.c         | 15 ++++++++++++
 src/linux/loongarch64/syscallent.h       |  8 +++++++
 src/xlat/elf_em.in                       |  1 +
 14 files changed, 154 insertions(+)
 create mode 100644 src/linux/loongarch64/arch_regs.c
 create mode 100644 src/linux/loongarch64/get_error.c
 create mode 100644 src/linux/loongarch64/get_scno.c
 create mode 100644 src/linux/loongarch64/get_syscall_args.c
 create mode 100644 src/linux/loongarch64/ioctls_arch0.h
 create mode 100644 src/linux/loongarch64/ioctls_inc0.h
 create mode 100644 src/linux/loongarch64/raw_syscall.h
 create mode 100644 src/linux/loongarch64/set_error.c
 create mode 100644 src/linux/loongarch64/set_scno.c
 create mode 100644 src/linux/loongarch64/syscallent.h

diff --git a/configure.ac b/configure.ac
index 2771c0f82..67e3746f4 100644
--- a/configure.ac
+++ b/configure.ac
@@ -110,6 +110,11 @@ ia64)
 	arch=ia64
 	AC_DEFINE([IA64], 1, [Define for the IA64 architecture.])
 	;;
+loongarch64)
+	arch=loongarch64
+	karch=loongarch
+	AC_DEFINE([LOONGARCH64], 1, [Define for the LoongArch 64-bit architecture.])
+	;;
 m68k)
 	arch=m68k
 	AC_DEFINE([M68K], 1, [Define for the m68k architecture.])
diff --git a/src/Makefile.am b/src/Makefile.am
index 5f66af95a..0c0057b0b 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -634,6 +634,16 @@ EXTRA_DIST =				\
 	linux/ia64/syscallent.h		\
 	linux/ia64/syscallent_base_nr.h	\
 	linux/ia64/userent.h		\
+	linux/loongarch64/arch_regs.c	\
+	linux/loongarch64/get_error.c	\
+	linux/loongarch64/get_scno.c	\
+	linux/loongarch64/get_syscall_args.c	\
+	linux/loongarch64/ioctls_arch0.h	\
+	linux/loongarch64/ioctls_inc0.h	\
+	linux/loongarch64/raw_syscall.h	\
+	linux/loongarch64/set_error.c	\
+	linux/loongarch64/set_scno.c	\
+	linux/loongarch64/syscallent.h	\
 	linux/m68k/arch_defs_.h		\
 	linux/m68k/arch_regs.c		\
 	linux/m68k/arch_rt_sigframe.c	\
diff --git a/src/linux/loongarch64/arch_regs.c b/src/linux/loongarch64/arch_regs.c
new file mode 100644
index 000000000..c34331759
--- /dev/null
+++ b/src/linux/loongarch64/arch_regs.c
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2016-2021 The strace developers.
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: LGPL-2.1-or-later
+ */
+
+static struct pt_regs loongarch_regs;
+#define ARCH_REGS_FOR_GETREGSET loongarch_regs
+#define ARCH_PC_REG loongarch_regs.csr_epc
+#define ARCH_SP_REG loongarch_regs.regs[3]
diff --git a/src/linux/loongarch64/get_error.c b/src/linux/loongarch64/get_error.c
new file mode 100644
index 000000000..11055a8af
--- /dev/null
+++ b/src/linux/loongarch64/get_error.c
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) 2016-2021 The strace developers.
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: LGPL-2.1-or-later
+ */
+
+#include "negated_errno.h"
+
+static void
+arch_get_error(struct tcb *tcp, const bool check_errno)
+{
+	if (check_errno && is_negated_errno(loongarch_regs.regs[4])) {
+		tcp->u_rval = -1;
+		tcp->u_error = -loongarch_regs.regs[4];
+	} else {
+		tcp->u_rval = loongarch_regs.regs[4];
+	}
+}
diff --git a/src/linux/loongarch64/get_scno.c b/src/linux/loongarch64/get_scno.c
new file mode 100644
index 000000000..d484eb922
--- /dev/null
+++ b/src/linux/loongarch64/get_scno.c
@@ -0,0 +1,14 @@
+/*
+ * Copyright (c) 2015-2021 The strace developers.
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: LGPL-2.1-or-later
+ */
+
+/* Return codes: 1 - ok, 0 - ignore, other - error. */
+static int
+arch_get_scno(struct tcb *tcp)
+{
+	tcp->scno = loongarch_regs.regs[11];
+	return 1;
+}
diff --git a/src/linux/loongarch64/get_syscall_args.c b/src/linux/loongarch64/get_syscall_args.c
new file mode 100644
index 000000000..8b92ffa68
--- /dev/null
+++ b/src/linux/loongarch64/get_syscall_args.c
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) 2016-2021 The strace developers.
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: LGPL-2.1-or-later
+ */
+
+/* Return -1 on error or 1 on success (never 0!). */
+static int
+arch_get_syscall_args(struct tcb *tcp)
+{
+	tcp->u_arg[0] = loongarch_regs.regs[4];
+	tcp->u_arg[1] = loongarch_regs.regs[5];
+	tcp->u_arg[2] = loongarch_regs.regs[6];
+	tcp->u_arg[3] = loongarch_regs.regs[7];
+	tcp->u_arg[4] = loongarch_regs.regs[8];
+	tcp->u_arg[5] = loongarch_regs.regs[9];
+	return 1;
+}
diff --git a/src/linux/loongarch64/ioctls_arch0.h b/src/linux/loongarch64/ioctls_arch0.h
new file mode 100644
index 000000000..9c039fc86
--- /dev/null
+++ b/src/linux/loongarch64/ioctls_arch0.h
@@ -0,0 +1 @@
+/* Generated by ioctls_gen.sh from definitions found in $linux/arch/riscv/include/ tree. */
diff --git a/src/linux/loongarch64/ioctls_inc0.h b/src/linux/loongarch64/ioctls_inc0.h
new file mode 100644
index 000000000..6028afbe4
--- /dev/null
+++ b/src/linux/loongarch64/ioctls_inc0.h
@@ -0,0 +1 @@
+#include "../64/ioctls_inc.h"
diff --git a/src/linux/loongarch64/raw_syscall.h b/src/linux/loongarch64/raw_syscall.h
new file mode 100644
index 000000000..58ad9b6fe
--- /dev/null
+++ b/src/linux/loongarch64/raw_syscall.h
@@ -0,0 +1,29 @@
+/*
+ * Raw syscalls.
+ *
+ * Copyright (c) 2018-2021 The strace developers.
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: LGPL-2.1-or-later
+ */
+
+#ifndef STRACE_RAW_SYSCALL_H
+# define STRACE_RAW_SYSCALL_H
+
+# include "kernel_types.h"
+
+static inline kernel_ulong_t
+raw_syscall_0(const kernel_ulong_t nr, kernel_ulong_t *err)
+{
+	*err = 0;
+	register kernel_ulong_t a7 __asm__("a7") = nr;
+	register kernel_ulong_t a0 __asm__("a0");
+	__asm__ __volatile__("syscall 0"
+			     : "=r"(a0)
+			     : "r"(a7)
+			     : "memory");
+	return a0;
+}
+# define raw_syscall_0 raw_syscall_0
+
+#endif /* !STRACE_RAW_SYSCALL_H */
diff --git a/src/linux/loongarch64/set_error.c b/src/linux/loongarch64/set_error.c
new file mode 100644
index 000000000..0d3172700
--- /dev/null
+++ b/src/linux/loongarch64/set_error.c
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) 2016-2021 The strace developers.
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: LGPL-2.1-or-later
+ */
+
+static int
+arch_set_error(struct tcb *tcp)
+{
+	loongarch_regs.regs[4] = -tcp->u_error;
+	return set_regs(tcp->pid);
+}
+
+static int
+arch_set_success(struct tcb *tcp)
+{
+	loongarch_regs.regs[4] = tcp->u_rval;
+	return set_regs(tcp->pid);
+}
diff --git a/src/linux/loongarch64/set_scno.c b/src/linux/loongarch64/set_scno.c
new file mode 100644
index 000000000..c9eec42ae
--- /dev/null
+++ b/src/linux/loongarch64/set_scno.c
@@ -0,0 +1,15 @@
+/*
+ * Copyright (c) 2016-2021 The strace developers.
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: LGPL-2.1-or-later
+ */
+
+static int
+arch_set_scno(struct tcb *tcp, kernel_ulong_t scno)
+{
+	if (ptrace_syscall_info_is_valid() && get_regs(tcp) < 0)
+		return -1;
+	loongarch_regs.regs[11] = scno;
+	return set_regs(tcp->pid);
+}
diff --git a/src/linux/loongarch64/syscallent.h b/src/linux/loongarch64/syscallent.h
new file mode 100644
index 000000000..644f780bb
--- /dev/null
+++ b/src/linux/loongarch64/syscallent.h
@@ -0,0 +1,8 @@
+/*
+ * Copyright (c) 2016-2021 The strace developers.
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: LGPL-2.1-or-later
+ */
+
+#include "../64/syscallent.h"
diff --git a/src/xlat/elf_em.in b/src/xlat/elf_em.in
index 9ffbcd6e0..18f4c9a70 100644
--- a/src/xlat/elf_em.in
+++ b/src/xlat/elf_em.in
@@ -190,6 +190,7 @@ EM_AMDGPU		224 /* AMD GPU architecture */
 EM_RISCV		243 /* RISC-V */
 EM_BPF			247 /* Linux BPF - in-kernel virtual machine */
 EM_CSKY			252 /* C-SKY */
+EM_LOONGARCH		258 /* LoongArch */
 EM_AVR32		0x18ad /* Atmel AVR32, removed in v4.12-rc1~159^2~5 */
 EM_FRV			0x5441 /* Fujitsu FR-V */
 EM_OR32			0x8472 /* arch/openrisc/include/uapi/asm/elf.h */
-- 
2.30.1

