From f585db8ad397f4e7e7ba0c9dfa3667411cb4bbbb Mon Sep 17 00:00:00 2001
From: Wang Xuerui <git@xen0n.name>
Date: Wed, 5 Feb 2020 20:51:38 +0800
Subject: [PATCH] MIPS: Loongson: Bond consecutive 64-bit load/stores with
 gslq/gssq.

Add predicate for Loongson load/store bonding.
---
 gcc/config/mips/mips-protos.h |   2 +
 gcc/config/mips/mips.c        | 124 ++++++++++++++++++++++++++++++++++
 gcc/config/mips/mips.md       |  50 ++++++++++++++
 3 files changed, 176 insertions(+)

diff --git a/gcc/config/mips/mips-protos.h b/gcc/config/mips/mips-protos.h
index 32070fdb8c9..da2b1e72f48 100644
--- a/gcc/config/mips/mips-protos.h
+++ b/gcc/config/mips/mips-protos.h
@@ -377,6 +377,8 @@ extern void mips_final_prescan_insn (rtx_insn *, rtx *, int);
 extern int mips_trampoline_code_size (void);
 extern void mips_function_profiler (FILE *);
 extern bool mips_load_store_bonding_p (rtx *, machine_mode, bool);
+extern bool mips_loongson_load_store_bonding_p (rtx *, machine_mode, bool);
+extern const char *mips_loongson_output_bonded_load_store (rtx *, bool, bool);
 
 typedef rtx (*mulsidi3_gen_fn) (rtx, rtx, rtx);
 #ifdef RTX_CODE
diff --git a/gcc/config/mips/mips.c b/gcc/config/mips/mips.c
index 360096cd0cc..309389615c1 100644
--- a/gcc/config/mips/mips.c
+++ b/gcc/config/mips/mips.c
@@ -20926,6 +20926,130 @@ mips_load_store_bonding_p (rtx *operands, machine_mode mode, bool load_p)
   return true;
 }
 
+/* Similar to mips_load_store_bonding_p, but has stricter alignment and
+   offset range requirements.  */
+bool
+mips_loongson_load_store_bonding_p (rtx *operands, machine_mode mode, bool load_p)
+{
+  rtx reg1, reg2, mem1, mem2, base1, base2;
+  enum reg_class rc1, rc2;
+  HOST_WIDE_INT offset1, offset2, base_offset;
+
+  if (load_p)
+    {
+      reg1 = operands[0];
+      reg2 = operands[2];
+      mem1 = operands[1];
+      mem2 = operands[3];
+    }
+  else
+    {
+      reg1 = operands[1];
+      reg2 = operands[3];
+      mem1 = operands[0];
+      mem2 = operands[2];
+    }
+
+  if (mips_address_insns (XEXP (mem1, 0), mode, false) == 0
+      || mips_address_insns (XEXP (mem2, 0), mode, false) == 0)
+    return false;
+
+  mips_split_plus (XEXP (mem1, 0), &base1, &offset1);
+  mips_split_plus (XEXP (mem2, 0), &base2, &offset2);
+
+  /* Base regs do not match.  */
+  if (!REG_P (base1) || !rtx_equal_p (base1, base2))
+    return false;
+
+  /* Either of the loads is clobbering base register.  It is legitimate to bond
+     loads if second load clobbers base register.  However, hardware does not
+     support such bonding.  */
+  if (load_p
+      && (REGNO (reg1) == REGNO (base1)
+	  || (REGNO (reg2) == REGNO (base1))))
+    return false;
+
+  /* Loading in same registers.  */
+  if (load_p
+      && REGNO (reg1) == REGNO (reg2))
+    return false;
+
+  /* The loads/stores are not of same type.  */
+  rc1 = REGNO_REG_CLASS (REGNO (reg1));
+  rc2 = REGNO_REG_CLASS (REGNO (reg2));
+  if (rc1 != rc2
+      && !reg_class_subset_p (rc1, rc2)
+      && !reg_class_subset_p (rc2, rc1))
+    return false;
+
+  if (abs (offset1 - offset2) != GET_MODE_SIZE (mode))
+    return false;
+
+  /* The two memory operands are guaranteed to be consecutive, check for
+     at least 128-bit alignment.  */
+  if (MEM_ALIGN (mem1) < 128 && MEM_ALIGN (mem2) < 128)
+    return false;
+
+  /* gslq/gssq cannot encode offsets outside of [-4096, 4095].  */
+  if (offset1 < -4096 || offset1 > 4095 || offset2 < -4096 || offset2 > 4095)
+    return false;
+
+  /* The lower offset must be multiple of 16 to be encodable.  */
+  base_offset = MIN (offset1, offset2);
+  if (base_offset % 16 != 0)
+    return false;
+
+  return true;
+}
+
+const char *
+mips_loongson_output_bonded_load_store (rtx *operands, bool load_p,
+					bool float_p)
+{
+  rtx mem1, mem2, base1, base2;
+  HOST_WIDE_INT offset1, offset2;
+
+  if (load_p)
+    {
+      mem1 = operands[1];
+      mem2 = operands[3];
+    }
+  else
+    {
+      mem1 = operands[0];
+      mem2 = operands[2];
+    }
+
+  mips_split_plus (XEXP (mem1, 0), &base1, &offset1);
+  mips_split_plus (XEXP (mem2, 0), &base2, &offset2);
+
+  /* Figure out which address is lower and use that as base of gslq/gssq.  */
+  if (offset1 < offset2)
+    /* operand order is reg1, reg2, mem1 */
+    if (load_p)
+      if (float_p)
+	return "gslqc1\t%0,%2,%1";
+      else
+	return "gslq\t%0,%2,%1";
+    else
+      if (float_p)
+	return "gssqc1\t%1,%3,%0";
+      else
+	return "gssq\t%1,%3,%0";
+  else
+    /* operand order is reg2, reg1, mem2 */
+    if (load_p)
+      if (float_p)
+	return "gslqc1\t%2,%0,%3";
+      else
+	return "gslq\t%2,%0,%3";
+    else
+      if (float_p)
+	return "gssqc1\t%3,%1,%2";
+      else
+	return "gssq\t%3,%1,%2";
+}
+
 /* OPERANDS describes the operands to a pair of SETs, in the order
    dest1, src1, dest2, src2.  Return true if the operands can be used
    in an LWP or SWP instruction; LOAD_P says which.  */
diff --git a/gcc/config/mips/mips.md b/gcc/config/mips/mips.md
index e41ccc103a6..2677e69ccff 100644
--- a/gcc/config/mips/mips.md
+++ b/gcc/config/mips/mips.md
@@ -801,6 +801,10 @@
 				 (DF "TARGET_HARD_FLOAT
 				      && TARGET_DOUBLE_FLOAT")])
 
+(define_mode_iterator LOONGSON_JOIN_MODE [DI
+					  (DF "TARGET_HARD_FLOAT
+					       && TARGET_DOUBLE_FLOAT")])
+
 ;; This mode iterator allows :HILO to be used as the mode of the
 ;; concatenated HI and LO registers.
 (define_mode_iterator HILO [(DI "!TARGET_64BIT") (TI "TARGET_64BIT")])
@@ -7755,6 +7759,23 @@
   [(set_attr "move_type" "load,fpload,store,fpstore")
    (set_attr "insn_count" "2,2,2,2")])
 
+;; Similar to above, but for Loongson.
+(define_insn "*loongson_join2_load_store<LOONGSON_JOIN_MODE:mode>"
+  [(set (match_operand:LOONGSON_JOIN_MODE 0 "nonimmediate_operand" "=d,f,m,m")
+	(match_operand:LOONGSON_JOIN_MODE 1 "nonimmediate_operand" "m,m,d,f"))
+   (set (match_operand:LOONGSON_JOIN_MODE 2 "nonimmediate_operand" "=d,f,m,m")
+	(match_operand:LOONGSON_JOIN_MODE 3 "nonimmediate_operand" "m,m,d,f"))]
+  "TARGET_64BIT && TARGET_LOONGSON_EXT && TARGET_LOAD_STORE_PAIRS && reload_completed"
+  {
+    bool load_p = (which_alternative == 0 || which_alternative == 1);
+    bool float_p = (which_alternative == 1 || which_alternative == 3);
+    return mips_loongson_output_bonded_load_store (operands, load_p, float_p);
+  }
+  [(set_attr "move_type" "load,fpload,store,fpstore")
+   (set_attr "insn_count" "1,1,1,1")
+   (set_attr "can_delay" "no,no,no,no")])
+
+
 ;; 2 HI/SI/SF/DF loads are joined.
 ;; P5600 does not support bonding of two LBs, hence QI mode is not included.
 ;; The loads must be non-volatile as they might be reordered at the time of asm
@@ -7829,6 +7850,35 @@
 		   (any_extend:SI (match_dup 3)))])]
   "")
 
+;; 2 DI/DF loads are joined for Loongson.
+(define_peephole2
+  [(set (match_operand:LOONGSON_JOIN_MODE 0 "register_operand")
+	(match_operand:LOONGSON_JOIN_MODE 1 "non_volatile_mem_operand"))
+   (set (match_operand:LOONGSON_JOIN_MODE 2 "register_operand")
+	(match_operand:LOONGSON_JOIN_MODE 3 "non_volatile_mem_operand"))]
+  "TARGET_64BIT && TARGET_LOONGSON_EXT && TARGET_LOAD_STORE_PAIRS
+   && mips_loongson_load_store_bonding_p (operands, <LOONGSON_JOIN_MODE:MODE>mode, true)"
+  [(parallel [(set (match_dup 0)
+		   (match_dup 1))
+	      (set (match_dup 2)
+		   (match_dup 3))])]
+  "")
+
+;; 2 DI/DF stores are joined for Loongson.
+(define_peephole2
+  [(set (match_operand:LOONGSON_JOIN_MODE 0 "memory_operand")
+	(match_operand:LOONGSON_JOIN_MODE 1 "register_operand"))
+   (set (match_operand:LOONGSON_JOIN_MODE 2 "memory_operand")
+	(match_operand:LOONGSON_JOIN_MODE 3 "register_operand"))]
+  "TARGET_64BIT && TARGET_LOONGSON_EXT && TARGET_LOAD_STORE_PAIRS
+   && mips_loongson_load_store_bonding_p (operands, <LOONGSON_JOIN_MODE:MODE>mode, false)"
+  [(parallel [(set (match_dup 0)
+		   (match_dup 1))
+	      (set (match_dup 2)
+		   (match_dup 3))])]
+  "")
+
+
 
 ;; Synchronization instructions.
 
-- 
2.21.0

