From 776fc4879b77c15fbaff9e43b06f2378113da70b Mon Sep 17 00:00:00 2001
From: Wang Xuerui <git@xen0n.name>
Date: Tue, 4 Feb 2020 22:13:33 +0800
Subject: [PATCH 8/8] Allow generating R6-style unaligned accesses on GS464V
 processors.

fix option incorrectly propagating to binutils

wtf trailing comma
---
 gcc/config/mips/mips.c   | 16 ++++++++++++++++
 gcc/config/mips/mips.h   | 17 +++++++++++++++--
 gcc/config/mips/mips.opt |  4 ++++
 3 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/gcc/config/mips/mips.c b/gcc/config/mips/mips.c
index d64a7425a05..1ba5d91e704 100644
--- a/gcc/config/mips/mips.c
+++ b/gcc/config/mips/mips.c
@@ -20254,6 +20254,22 @@ mips_option_override (void)
       target_flags |= MASK_LOONGSON_EXT;
     }
 
+  /* Don't emit R6-style unaligned load/stores on processors without efficient
+     unaligned accesses.  */
+  if (TARGET_UNALIGNED_ACCESSES && !ISA_HAS_FAST_UNALIGNED_ACCESSES)
+    {
+      error ("the %qs architecture does not have efficient unaligned"
+	     " accesses", mips_arch_info->name);
+    }
+
+  /* Similarly, TARGET_UNALIGNED_ACCESSES cannot be disabled on
+     !ISA_HAS_LWL_LWR processors.  */
+  if (!TARGET_UNALIGNED_ACCESSES && !ISA_HAS_LWL_LWR)
+    {
+      error ("the %qs architecture does not support lwl/lwr-style unaligned"
+	     " accesses", mips_arch_info->name);
+    }
+
   /* .eh_frame addresses should be the same width as a C pointer.
      Most MIPS ABIs support only one pointer size, so the assembler
      will usually know exactly how big an .eh_frame address is.
diff --git a/gcc/config/mips/mips.h b/gcc/config/mips/mips.h
index 28260d647ec..4b8e5eb95c4 100644
--- a/gcc/config/mips/mips.h
+++ b/gcc/config/mips/mips.h
@@ -844,6 +844,14 @@ struct mips_cpu_info {
   "%{mnan*:;mips32r6|mips64r6:-mnan=2008;march=m51*: \
 					 %{!msoft-float:-mnan=2008}}"
 
+/* Infer a -munaligned-accesses setting from a -mips argument and a -march
+   argument, on the assumption that fast unaligned accesses are desired
+   where possible.  */
+#define MIPS_UNALIGNED_ACCESSES_SPEC \
+  "%{munaligned-accesses|mno-unaligned-accesses:; \
+     mips32r6|mips64r6|march=gs464v: -munaligned-accesses; \
+     : -mno-unaligned-accesses}"
+
 #if (MIPS_ABI_DEFAULT == ABI_O64 \
      || MIPS_ABI_DEFAULT == ABI_N32 \
      || MIPS_ABI_DEFAULT == ABI_64)
@@ -891,7 +899,8 @@ struct mips_cpu_info {
   {"mips-plt", "%{!mplt:%{!mno-plt:-m%(VALUE)}}" }, \
   {"synci", "%{!msynci:%{!mno-synci:-m%(VALUE)}}" },			\
   {"lxc1-sxc1", "%{!mlxc1-sxc1:%{!mno-lxc1-sxc1:-m%(VALUE)}}" }, \
-  {"madd4", "%{!mmadd4:%{!mno-madd4:-m%(VALUE)}}" } \
+  {"madd4", "%{!mmadd4:%{!mno-madd4:-m%(VALUE)}}" }, \
+  {"unaligned-accesses", "%{!munaligned-accesses:%{!mno-unaligned-accesses:-m%(VALUE)}}" } \
 
 /* A spec that infers the:
    -mnan=2008 setting from a -mips argument,
@@ -899,6 +908,7 @@ struct mips_cpu_info {
    -mloongson-mmi setting from a -march argument.  */
 #define BASE_DRIVER_SELF_SPECS	\
   MIPS_ISA_NAN2008_SPEC,	\
+  MIPS_UNALIGNED_ACCESSES_SPEC,	\
   MIPS_ASE_DSP_SPEC, 		\
   MIPS_ASE_LOONGSON_MMI_SPEC,	\
   MIPS_ASE_LOONGSON_EXT_SPEC,	\
@@ -1157,7 +1167,10 @@ struct mips_cpu_info {
 
 #define ISA_HAS_LWL_LWR		(mips_isa_rev <= 5 && !TARGET_MIPS16)
 
-#define ISA_USES_LWL_LWR	ISA_HAS_LWL_LWR
+#define ISA_USES_LWL_LWR	(ISA_HAS_LWL_LWR && !TARGET_UNALIGNED_ACCESSES)
+
+#define ISA_HAS_FAST_UNALIGNED_ACCESSES		(mips_isa_rev >= 6	\
+						 || TARGET_GS464V)
 
 #define ISA_HAS_IEEE_754_LEGACY	(mips_isa_rev <= 5)
 
diff --git a/gcc/config/mips/mips.opt b/gcc/config/mips/mips.opt
index 817a4823d99..7d0a4a35f33 100644
--- a/gcc/config/mips/mips.opt
+++ b/gcc/config/mips/mips.opt
@@ -475,3 +475,7 @@ Use Loongson EXTension (EXT) instructions.
 mloongson-ext2
 Target Report Var(TARGET_LOONGSON_EXT2)
 Use Loongson EXTension R2 (EXT2) instructions.
+
+munaligned-accesses
+Target Report Var(TARGET_UNALIGNED_ACCESSES)
+Emit ordinary load/stores for unaligned memory accesses.
-- 
2.21.0

