From 612c343b2e5e5bd886a97dd3db00e4fdcb7efbcd Mon Sep 17 00:00:00 2001
From: xuhao <xuhao@loongson.cn>
Date: Wed, 11 Aug 2021 13:54:40 +0800
Subject: [PATCH 10/30] change name "loong_" into "larch_", "LOONG_" into
 "LOONGARCH_".

bfd/elfxx-loongarch.c:
	change "loong_reloc_map" into "larch_reloc_map"
include/elf/loongarch.h:
	change "_ELF_LOONG_H" into "_ELF_LOONGARCH_H"
ld/emultempl/loongarchelf.em:
	change "loong_elf_before_allocation" into "larch_elf_before_allocation"
	change "loong_create_output_section_statements" into "larch_create_output_section_statements"
---
 bfd/elfxx-loongarch.c        | 8 ++++----
 include/elf/loongarch.h      | 6 +++---
 ld/emultempl/loongarchelf.em | 8 ++++----
 3 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/bfd/elfxx-loongarch.c b/bfd/elfxx-loongarch.c
index 3fe9f470531..004e8de1d1e 100644
--- a/bfd/elfxx-loongarch.c
+++ b/bfd/elfxx-loongarch.c
@@ -104,7 +104,7 @@ struct elf_reloc_map
   enum elf_loongarch_reloc_type elf_val;
 };
 
-static const struct elf_reloc_map loong_reloc_map[] =
+static const struct elf_reloc_map larch_reloc_map[] =
 {
   { BFD_RELOC_NONE, R_LARCH_NONE },
   { BFD_RELOC_32, R_LARCH_32 },
@@ -175,9 +175,9 @@ loongarch_reloc_type_lookup (bfd *abfd ATTRIBUTE_UNUSED,
                              bfd_reloc_code_real_type code)
 {
   unsigned int i;
-  for (i = 0; i < ARRAY_SIZE (loong_reloc_map); i++)
-    if (loong_reloc_map[i].bfd_val == code)
-      return loongarch_elf_rtype_to_howto ((int) loong_reloc_map[i].elf_val);
+  for (i = 0; i < ARRAY_SIZE (larch_reloc_map); i++)
+    if (larch_reloc_map[i].bfd_val == code)
+      return loongarch_elf_rtype_to_howto ((int) larch_reloc_map[i].elf_val);
 
   return NULL;
 }
diff --git a/include/elf/loongarch.h b/include/elf/loongarch.h
index bdf3e38225e..d701813416d 100644
--- a/include/elf/loongarch.h
+++ b/include/elf/loongarch.h
@@ -17,8 +17,8 @@
    along with this program; see the file COPYING3. If not,
    see <http://www.gnu.org/licenses/>.  */
 
-#ifndef _ELF_LOONG_H
-#define _ELF_LOONG_H
+#ifndef _ELF_LOONGARCH_H
+#define _ELF_LOONGARCH_H
 
 #include "elf/reloc-macros.h"
 #include "libiberty.h"
@@ -98,4 +98,4 @@ END_RELOC_NUMBERS (R_LARCH_count)
 #define EF_LARCH_ABI_LP64 0x0003
 #define EF_LARCH_ABI_LP32 0x0001
 
-#endif /* _ELF_LOONG_H */
+#endif /* _ELF_LOONGARCH_H */
diff --git a/ld/emultempl/loongarchelf.em b/ld/emultempl/loongarchelf.em
index 4984537eb0a..2695f939214 100644
--- a/ld/emultempl/loongarchelf.em
+++ b/ld/emultempl/loongarchelf.em
@@ -25,7 +25,7 @@ fragment <<EOF
 #include "elf/loongarch.h"
 
 static void
-loong_elf_before_allocation (void)
+larch_elf_before_allocation (void)
 {
   gld${EMULATION_NAME}_before_allocation ();
 
@@ -69,7 +69,7 @@ gld${EMULATION_NAME}_after_allocation (void)
    After the output has been created, but before inputs are read.  */
 
 static void
-loong_create_output_section_statements (void)
+larch_create_output_section_statements (void)
 {
   /* See PR 22920 for an example of why this is necessary.  */
   if (strstr (bfd_get_target (link_info.output_bfd), "loong") == NULL)
@@ -86,6 +86,6 @@ loong_create_output_section_statements (void)
 
 EOF
 
-LDEMUL_BEFORE_ALLOCATION=loong_elf_before_allocation
+LDEMUL_BEFORE_ALLOCATION=larch_elf_before_allocation
 LDEMUL_AFTER_ALLOCATION=gld${EMULATION_NAME}_after_allocation
-LDEMUL_CREATE_OUTPUT_SECTION_STATEMENTS=loong_create_output_section_statements
+LDEMUL_CREATE_OUTPUT_SECTION_STATEMENTS=larch_create_output_section_statements
-- 
2.30.1

