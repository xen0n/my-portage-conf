From f8ec0dbd4b08456cda7a38ee4a34924665afa69a Mon Sep 17 00:00:00 2001
From: WANG Xuerui <git@xen0n.name>
Date: Wed, 5 May 2021 02:33:01 +0800
Subject: [PATCH] untested unofficial loongarch64 architecture support

fix sigcontext definition to be MIPS-like to accommodate LA GCC code

try to add _DYNAMIC sym

implement dlsym for loongarch64
---
 arch/loongarch64/atomic_arch.h             |  59 ++++
 arch/loongarch64/bits/alltypes.h.in        |  18 ++
 arch/loongarch64/bits/fenv.h               |  17 ++
 arch/loongarch64/bits/float.h              |  16 ++
 arch/loongarch64/bits/posix.h              |   2 +
 arch/loongarch64/bits/setjmp.h             |   1 +
 arch/loongarch64/bits/signal.h             | 107 ++++++++
 arch/loongarch64/bits/stat.h               |  18 ++
 arch/loongarch64/bits/stdint.h             |  20 ++
 arch/loongarch64/bits/syscall.h.in         | 296 +++++++++++++++++++++
 arch/loongarch64/crt_arch.h                |  14 +
 arch/loongarch64/kstat.h                   |  21 ++
 arch/loongarch64/pthread_arch.h            |  13 +
 arch/loongarch64/reloc.h                   |  20 ++
 arch/loongarch64/syscall_arch.h            |  77 ++++++
 configure                                  |   5 +
 include/elf.h                              |  72 ++++-
 src/fenv/loongarch64/fenv-sf.c             |   3 +
 src/fenv/loongarch64/fenv.S                |  66 +++++
 src/ldso/loongarch64/dlsym.s               |   6 +
 src/math/loongarch64/copysign.c            |  15 ++
 src/math/loongarch64/copysignf.c           |  15 ++
 src/math/loongarch64/fabs.c                |  15 ++
 src/math/loongarch64/fabsf.c               |  15 ++
 src/math/loongarch64/fma.c                 |  15 ++
 src/math/loongarch64/fmaf.c                |  15 ++
 src/math/loongarch64/fmax.c                |  15 ++
 src/math/loongarch64/fmaxf.c               |  15 ++
 src/math/loongarch64/fmin.c                |  15 ++
 src/math/loongarch64/fminf.c               |  15 ++
 src/math/loongarch64/sqrt.c                |  15 ++
 src/math/loongarch64/sqrtf.c               |  15 ++
 src/setjmp/loongarch64/longjmp.S           |  38 +++
 src/setjmp/loongarch64/setjmp.S            |  37 +++
 src/thread/loongarch64/__set_thread_area.s |   6 +
 src/thread/loongarch64/__unmapself.s       |   7 +
 src/thread/loongarch64/clone.s             |  34 +++
 src/thread/loongarch64/syscall_cp.s        |  29 ++
 38 files changed, 1181 insertions(+), 1 deletion(-)
 create mode 100644 arch/loongarch64/atomic_arch.h
 create mode 100644 arch/loongarch64/bits/alltypes.h.in
 create mode 100644 arch/loongarch64/bits/fenv.h
 create mode 100644 arch/loongarch64/bits/float.h
 create mode 100644 arch/loongarch64/bits/posix.h
 create mode 100644 arch/loongarch64/bits/setjmp.h
 create mode 100644 arch/loongarch64/bits/signal.h
 create mode 100644 arch/loongarch64/bits/stat.h
 create mode 100644 arch/loongarch64/bits/stdint.h
 create mode 100644 arch/loongarch64/bits/syscall.h.in
 create mode 100644 arch/loongarch64/crt_arch.h
 create mode 100644 arch/loongarch64/kstat.h
 create mode 100644 arch/loongarch64/pthread_arch.h
 create mode 100644 arch/loongarch64/reloc.h
 create mode 100644 arch/loongarch64/syscall_arch.h
 create mode 100644 src/fenv/loongarch64/fenv-sf.c
 create mode 100644 src/fenv/loongarch64/fenv.S
 create mode 100644 src/ldso/loongarch64/dlsym.s
 create mode 100644 src/math/loongarch64/copysign.c
 create mode 100644 src/math/loongarch64/copysignf.c
 create mode 100644 src/math/loongarch64/fabs.c
 create mode 100644 src/math/loongarch64/fabsf.c
 create mode 100644 src/math/loongarch64/fma.c
 create mode 100644 src/math/loongarch64/fmaf.c
 create mode 100644 src/math/loongarch64/fmax.c
 create mode 100644 src/math/loongarch64/fmaxf.c
 create mode 100644 src/math/loongarch64/fmin.c
 create mode 100644 src/math/loongarch64/fminf.c
 create mode 100644 src/math/loongarch64/sqrt.c
 create mode 100644 src/math/loongarch64/sqrtf.c
 create mode 100644 src/setjmp/loongarch64/longjmp.S
 create mode 100644 src/setjmp/loongarch64/setjmp.S
 create mode 100644 src/thread/loongarch64/__set_thread_area.s
 create mode 100644 src/thread/loongarch64/__unmapself.s
 create mode 100644 src/thread/loongarch64/clone.s
 create mode 100644 src/thread/loongarch64/syscall_cp.s

diff --git a/arch/loongarch64/atomic_arch.h b/arch/loongarch64/atomic_arch.h
new file mode 100644
index 00000000..75d292cb
--- /dev/null
+++ b/arch/loongarch64/atomic_arch.h
@@ -0,0 +1,59 @@
+#define a_barrier a_barrier
+static inline void a_barrier()
+{
+	__asm__ __volatile__ ("dbar 0" : : : "memory");
+}
+
+#define a_ll a_ll
+static inline int a_ll(volatile int *p)
+{
+	int v;
+	__asm__ __volatile__ (
+		"ll.w %0, %1"
+		: "=r"(v) : "m"(*p));
+	return v;
+}
+
+#define a_sc a_sc
+static inline int a_sc(volatile int *p, int v)
+{
+	int r;
+	__asm__ __volatile__ (
+		"sc.w %0, %1"
+		: "=r"(r), "=m"(*p) : "0"(v) : "memory");
+	return r;
+}
+
+#define a_ll_p a_ll_p
+static inline void *a_ll_p(volatile void *p)
+{
+	void *v;
+	__asm__ __volatile__ (
+		"ll.d %0, %1"
+		: "=r"(v) : "m"(*(void *volatile *)p));
+	return v;
+}
+
+#define a_sc_p a_sc_p
+static inline int a_sc_p(volatile void *p, void *v)
+{
+	long r;
+	__asm__ __volatile__ (
+		"sc.d %0, %1"
+		: "=r"(r), "=m"(*(void *volatile *)p) : "0"(v) : "memory");
+	return r;
+}
+
+#define a_ctz_64 a_ctz_64
+static inline int a_ctz_64(uint64_t x)
+{
+	__asm__("ctz.d %0, %1" : "=r"(x) : "r"(x));
+	return x;
+}
+
+#define a_clz_64 a_clz_64
+static inline int a_clz_64(uint64_t x)
+{
+	__asm__("clz.d %0, %1" : "=r"(x) : "r"(x));
+	return x;
+}
diff --git a/arch/loongarch64/bits/alltypes.h.in b/arch/loongarch64/bits/alltypes.h.in
new file mode 100644
index 00000000..ac51d4d2
--- /dev/null
+++ b/arch/loongarch64/bits/alltypes.h.in
@@ -0,0 +1,18 @@
+#define _Addr long
+#define _Int64 long
+#define _Reg long
+
+#define __BYTE_ORDER __LITTLE_ENDIAN
+#define __LONG_MAX 0x7fffffffffffffffL
+
+#ifndef __cplusplus
+TYPEDEF int wchar_t;
+#endif
+
+TYPEDEF int blksize_t;
+TYPEDEF unsigned int nlink_t;
+
+TYPEDEF float float_t;
+TYPEDEF double double_t;
+
+TYPEDEF struct { long long __ll; long double __ld; } max_align_t;
diff --git a/arch/loongarch64/bits/fenv.h b/arch/loongarch64/bits/fenv.h
new file mode 100644
index 00000000..91ca14a5
--- /dev/null
+++ b/arch/loongarch64/bits/fenv.h
@@ -0,0 +1,17 @@
+#define FE_INVALID      16
+#define FE_DIVBYZERO    8
+#define FE_OVERFLOW     4
+#define FE_UNDERFLOW    2
+#define FE_INEXACT      1
+
+#define FE_ALL_EXCEPT   31
+
+#define FE_TONEAREST    0
+#define FE_TOWARDZERO   1
+#define FE_UPWARD       2
+#define FE_DOWNWARD     3
+
+typedef unsigned int fexcept_t;
+typedef unsigned int fenv_t;
+
+#define FE_DFL_ENV      ((const fenv_t *) -1)
diff --git a/arch/loongarch64/bits/float.h b/arch/loongarch64/bits/float.h
new file mode 100644
index 00000000..719c7908
--- /dev/null
+++ b/arch/loongarch64/bits/float.h
@@ -0,0 +1,16 @@
+#define FLT_EVAL_METHOD 0
+
+#define LDBL_TRUE_MIN 6.47517511943802511092443895822764655e-4966L
+#define LDBL_MIN 3.36210314311209350626267781732175260e-4932L
+#define LDBL_MAX 1.18973149535723176508575932662800702e+4932L
+#define LDBL_EPSILON 1.92592994438723585305597794258492732e-34L
+
+#define LDBL_MANT_DIG 113
+#define LDBL_MIN_EXP (-16381)
+#define LDBL_MAX_EXP 16384
+
+#define LDBL_DIG 33
+#define LDBL_MIN_10_EXP (-4931)
+#define LDBL_MAX_10_EXP 4932
+
+#define DECIMAL_DIG 36
diff --git a/arch/loongarch64/bits/posix.h b/arch/loongarch64/bits/posix.h
new file mode 100644
index 00000000..8068ce98
--- /dev/null
+++ b/arch/loongarch64/bits/posix.h
@@ -0,0 +1,2 @@
+#define _POSIX_V6_LP64_OFF64 1
+#define _POSIX_V7_LP64_OFF64 1
diff --git a/arch/loongarch64/bits/setjmp.h b/arch/loongarch64/bits/setjmp.h
new file mode 100644
index 00000000..54bc2610
--- /dev/null
+++ b/arch/loongarch64/bits/setjmp.h
@@ -0,0 +1 @@
+typedef unsigned long __jmp_buf[22];
diff --git a/arch/loongarch64/bits/signal.h b/arch/loongarch64/bits/signal.h
new file mode 100644
index 00000000..ff7e54c1
--- /dev/null
+++ b/arch/loongarch64/bits/signal.h
@@ -0,0 +1,107 @@
+#if defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE) \
+ || defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
+
+#if defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
+# define MINSIGSTKSZ 2048
+# define SIGSTKSZ 8192
+#endif
+
+#if defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
+typedef unsigned long long greg_t, gregset_t[32];
+
+typedef struct {
+	union {
+		double fp_dregs[32];
+		struct {
+			float _fp_fregs;
+			unsigned _fp_pad;
+		} fp_fregs[32];
+	} fp_r;
+} fpregset_t;
+
+struct sigcontext {
+	unsigned long long sc_regs[32];
+	unsigned long long sc_fpregs[32];
+	unsigned long long sc_pc;
+	unsigned int sc_fpc_csr;
+	unsigned int sc_used_math;
+};
+
+typedef struct {
+	gregset_t gregs;
+	fpregset_t fpregs;
+	greg_t pc;
+	unsigned int fpc_csr;
+	unsigned int used_math;
+} mcontext_t;
+#else
+typedef struct {
+	unsigned long long __gregs[32];
+	unsigned long long __fpregs[32];
+	unsigned long long __pc;
+	unsigned int __fpc_csr;
+} mcontext_t;
+#endif
+
+struct sigaltstack {
+	void *ss_sp;
+	int ss_flags;
+	size_t ss_size;
+};
+
+typedef struct __ucontext
+{
+	unsigned long uc_flags;
+	struct __ucontext *uc_link;
+	stack_t uc_stack;
+	sigset_t uc_sigmask;
+	mcontext_t uc_mcontext;
+} ucontext_t;
+
+#define SA_NOCLDSTOP 1
+#define SA_NOCLDWAIT 2
+#define SA_SIGINFO   4
+#define SA_ONSTACK   0x08000000
+#define SA_RESTART   0x10000000
+#define SA_NODEFER   0x40000000
+#define SA_RESETHAND 0x80000000
+#define SA_RESTORER  0x04000000
+
+#endif
+
+#define SIGHUP     1
+#define SIGINT     2
+#define SIGQUIT    3
+#define SIGILL     4
+#define SIGTRAP    5
+#define SIGABRT    6
+#define SIGIOT     SIGABRT
+#define SIGBUS     7
+#define SIGFPE     8
+#define SIGKILL    9
+#define SIGUSR1   10
+#define SIGSEGV   11
+#define SIGUSR2   12
+#define SIGPIPE   13
+#define SIGALRM   14
+#define SIGTERM   15
+#define SIGSTKFLT 16
+#define SIGCHLD   17
+#define SIGCONT   18
+#define SIGSTOP   19
+#define SIGTSTP   20
+#define SIGTTIN   21
+#define SIGTTOU   22
+#define SIGURG    23
+#define SIGXCPU   24
+#define SIGXFSZ   25
+#define SIGVTALRM 26
+#define SIGPROF   27
+#define SIGWINCH  28
+#define SIGIO     29
+#define SIGPOLL   SIGIO
+#define SIGPWR    30
+#define SIGSYS    31
+#define SIGUNUSED SIGSYS
+
+#define _NSIG     128
diff --git a/arch/loongarch64/bits/stat.h b/arch/loongarch64/bits/stat.h
new file mode 100644
index 00000000..b7f4221b
--- /dev/null
+++ b/arch/loongarch64/bits/stat.h
@@ -0,0 +1,18 @@
+struct stat {
+	dev_t st_dev;
+	ino_t st_ino;
+	mode_t st_mode;
+	nlink_t st_nlink;
+	uid_t st_uid;
+	gid_t st_gid;
+	dev_t st_rdev;
+	unsigned long __pad;
+	off_t st_size;
+	blksize_t st_blksize;
+	int __pad2;
+	blkcnt_t st_blocks;
+	struct timespec st_atim;
+	struct timespec st_mtim;
+	struct timespec st_ctim;
+	unsigned __unused[2];
+};
diff --git a/arch/loongarch64/bits/stdint.h b/arch/loongarch64/bits/stdint.h
new file mode 100644
index 00000000..1bb147f2
--- /dev/null
+++ b/arch/loongarch64/bits/stdint.h
@@ -0,0 +1,20 @@
+typedef int32_t int_fast16_t;
+typedef int32_t int_fast32_t;
+typedef uint32_t uint_fast16_t;
+typedef uint32_t uint_fast32_t;
+
+#define INT_FAST16_MIN  INT32_MIN
+#define INT_FAST32_MIN  INT32_MIN
+
+#define INT_FAST16_MAX  INT32_MAX
+#define INT_FAST32_MAX  INT32_MAX
+
+#define UINT_FAST16_MAX UINT32_MAX
+#define UINT_FAST32_MAX UINT32_MAX
+
+#define INTPTR_MIN      INT64_MIN
+#define INTPTR_MAX      INT64_MAX
+#define UINTPTR_MAX     UINT64_MAX
+#define PTRDIFF_MIN     INT64_MIN
+#define PTRDIFF_MAX     INT64_MAX
+#define SIZE_MAX        UINT64_MAX
diff --git a/arch/loongarch64/bits/syscall.h.in b/arch/loongarch64/bits/syscall.h.in
new file mode 100644
index 00000000..cfeb45d8
--- /dev/null
+++ b/arch/loongarch64/bits/syscall.h.in
@@ -0,0 +1,296 @@
+#define __NR_io_setup 0
+#define __NR_io_destroy 1
+#define __NR_io_submit 2
+#define __NR_io_cancel 3
+#define __NR_io_getevents 4
+#define __NR_setxattr 5
+#define __NR_lsetxattr 6
+#define __NR_fsetxattr 7
+#define __NR_getxattr 8
+#define __NR_lgetxattr 9
+#define __NR_fgetxattr 10
+#define __NR_listxattr 11
+#define __NR_llistxattr 12
+#define __NR_flistxattr 13
+#define __NR_removexattr 14
+#define __NR_lremovexattr 15
+#define __NR_fremovexattr 16
+#define __NR_getcwd 17
+#define __NR_lookup_dcookie 18
+#define __NR_eventfd2 19
+#define __NR_epoll_create1 20
+#define __NR_epoll_ctl 21
+#define __NR_epoll_pwait 22
+#define __NR_dup 23
+#define __NR_dup3 24
+#define __NR_fcntl 25
+#define __NR_inotify_init1 26
+#define __NR_inotify_add_watch 27
+#define __NR_inotify_rm_watch 28
+#define __NR_ioctl 29
+#define __NR_ioprio_set 30
+#define __NR_ioprio_get 31
+#define __NR_flock 32
+#define __NR_mknodat 33
+#define __NR_mkdirat 34
+#define __NR_unlinkat 35
+#define __NR_symlinkat 36
+#define __NR_linkat 37
+#define __NR_umount2 39
+#define __NR_mount 40
+#define __NR_pivot_root 41
+#define __NR_nfsservctl 42
+#define __NR_statfs 43
+#define __NR_fstatfs 44
+#define __NR_truncate 45
+#define __NR_ftruncate 46
+#define __NR_fallocate 47
+#define __NR_faccessat 48
+#define __NR_chdir 49
+#define __NR_fchdir 50
+#define __NR_chroot 51
+#define __NR_fchmod 52
+#define __NR_fchmodat 53
+#define __NR_fchownat 54
+#define __NR_fchown 55
+#define __NR_openat 56
+#define __NR_close 57
+#define __NR_vhangup 58
+#define __NR_pipe2 59
+#define __NR_quotactl 60
+#define __NR_getdents64 61
+#define __NR_lseek 62
+#define __NR_read 63
+#define __NR_write 64
+#define __NR_readv 65
+#define __NR_writev 66
+#define __NR_pread64 67
+#define __NR_pwrite64 68
+#define __NR_preadv 69
+#define __NR_pwritev 70
+#define __NR_sendfile 71
+#define __NR_pselect6 72
+#define __NR_ppoll 73
+#define __NR_signalfd4 74
+#define __NR_vmsplice 75
+#define __NR_splice 76
+#define __NR_tee 77
+#define __NR_readlinkat 78
+#define __NR_fstatat 79
+#define __NR_fstat 80
+#define __NR_sync 81
+#define __NR_fsync 82
+#define __NR_fdatasync 83
+#define __NR_sync_file_range 84
+#define __NR_timerfd_create 85
+#define __NR_timerfd_settime 86
+#define __NR_timerfd_gettime 87
+#define __NR_utimensat 88
+#define __NR_acct 89
+#define __NR_capget 90
+#define __NR_capset 91
+#define __NR_personality 92
+#define __NR_exit 93
+#define __NR_exit_group 94
+#define __NR_waitid 95
+#define __NR_set_tid_address 96
+#define __NR_unshare 97
+#define __NR_futex 98
+#define __NR_set_robust_list 99
+#define __NR_get_robust_list 100
+#define __NR_nanosleep 101
+#define __NR_getitimer 102
+#define __NR_setitimer 103
+#define __NR_kexec_load 104
+#define __NR_init_module 105
+#define __NR_delete_module 106
+#define __NR_timer_create 107
+#define __NR_timer_gettime 108
+#define __NR_timer_getoverrun 109
+#define __NR_timer_settime 110
+#define __NR_timer_delete 111
+#define __NR_clock_settime 112
+#define __NR_clock_gettime 113
+#define __NR_clock_getres 114
+#define __NR_clock_nanosleep 115
+#define __NR_syslog 116
+#define __NR_ptrace 117
+#define __NR_sched_setparam 118
+#define __NR_sched_setscheduler 119
+#define __NR_sched_getscheduler 120
+#define __NR_sched_getparam 121
+#define __NR_sched_setaffinity 122
+#define __NR_sched_getaffinity 123
+#define __NR_sched_yield 124
+#define __NR_sched_get_priority_max 125
+#define __NR_sched_get_priority_min 126
+#define __NR_sched_rr_get_interval 127
+#define __NR_restart_syscall 128
+#define __NR_kill 129
+#define __NR_tkill 130
+#define __NR_tgkill 131
+#define __NR_sigaltstack 132
+#define __NR_rt_sigsuspend 133
+#define __NR_rt_sigaction 134
+#define __NR_rt_sigprocmask 135
+#define __NR_rt_sigpending 136
+#define __NR_rt_sigtimedwait 137
+#define __NR_rt_sigqueueinfo 138
+#define __NR_rt_sigreturn 139
+#define __NR_setpriority 140
+#define __NR_getpriority 141
+#define __NR_reboot 142
+#define __NR_setregid 143
+#define __NR_setgid 144
+#define __NR_setreuid 145
+#define __NR_setuid 146
+#define __NR_setresuid 147
+#define __NR_getresuid 148
+#define __NR_setresgid 149
+#define __NR_getresgid 150
+#define __NR_setfsuid 151
+#define __NR_setfsgid 152
+#define __NR_times 153
+#define __NR_setpgid 154
+#define __NR_getpgid 155
+#define __NR_getsid 156
+#define __NR_setsid 157
+#define __NR_getgroups 158
+#define __NR_setgroups 159
+#define __NR_uname 160
+#define __NR_sethostname 161
+#define __NR_setdomainname 162
+#define __NR_getrlimit 163
+#define __NR_setrlimit 164
+#define __NR_getrusage 165
+#define __NR_umask 166
+#define __NR_prctl 167
+#define __NR_getcpu 168
+#define __NR_gettimeofday 169
+#define __NR_settimeofday 170
+#define __NR_adjtimex 171
+#define __NR_getpid 172
+#define __NR_getppid 173
+#define __NR_getuid 174
+#define __NR_geteuid 175
+#define __NR_getgid 176
+#define __NR_getegid 177
+#define __NR_gettid 178
+#define __NR_sysinfo 179
+#define __NR_mq_open 180
+#define __NR_mq_unlink 181
+#define __NR_mq_timedsend 182
+#define __NR_mq_timedreceive 183
+#define __NR_mq_notify 184
+#define __NR_mq_getsetattr 185
+#define __NR_msgget 186
+#define __NR_msgctl 187
+#define __NR_msgrcv 188
+#define __NR_msgsnd 189
+#define __NR_semget 190
+#define __NR_semctl 191
+#define __NR_semtimedop 192
+#define __NR_semop 193
+#define __NR_shmget 194
+#define __NR_shmctl 195
+#define __NR_shmat 196
+#define __NR_shmdt 197
+#define __NR_socket 198
+#define __NR_socketpair 199
+#define __NR_bind 200
+#define __NR_listen 201
+#define __NR_accept 202
+#define __NR_connect 203
+#define __NR_getsockname 204
+#define __NR_getpeername 205
+#define __NR_sendto 206
+#define __NR_recvfrom 207
+#define __NR_setsockopt 208
+#define __NR_getsockopt 209
+#define __NR_shutdown 210
+#define __NR_sendmsg 211
+#define __NR_recvmsg 212
+#define __NR_readahead 213
+#define __NR_brk 214
+#define __NR_munmap 215
+#define __NR_mremap 216
+#define __NR_add_key 217
+#define __NR_request_key 218
+#define __NR_keyctl 219
+#define __NR_clone 220
+#define __NR_execve 221
+#define __NR_mmap 222
+#define __NR_fadvise64 223
+#define __NR_swapon 224
+#define __NR_swapoff 225
+#define __NR_mprotect 226
+#define __NR_msync 227
+#define __NR_mlock 228
+#define __NR_munlock 229
+#define __NR_mlockall 230
+#define __NR_munlockall 231
+#define __NR_mincore 232
+#define __NR_madvise 233
+#define __NR_remap_file_pages 234
+#define __NR_mbind 235
+#define __NR_get_mempolicy 236
+#define __NR_set_mempolicy 237
+#define __NR_migrate_pages 238
+#define __NR_move_pages 239
+#define __NR_rt_tgsigqueueinfo 240
+#define __NR_perf_event_open 241
+#define __NR_accept4 242
+#define __NR_recvmmsg 243
+#define __NR_arch_specific_syscall 244
+#define __NR_wait4 260
+#define __NR_prlimit64 261
+#define __NR_fanotify_init 262
+#define __NR_fanotify_mark 263
+#define __NR_name_to_handle_at 264
+#define __NR_open_by_handle_at 265
+#define __NR_clock_adjtime 266
+#define __NR_syncfs 267
+#define __NR_setns 268
+#define __NR_sendmmsg 269
+#define __NR_process_vm_readv 270
+#define __NR_process_vm_writev 271
+#define __NR_kcmp 272
+#define __NR_finit_module 273
+#define __NR_sched_setattr 274
+#define __NR_sched_getattr 275
+#define __NR_renameat2 276
+#define __NR_seccomp 277
+#define __NR_getrandom 278
+#define __NR_memfd_create 279
+#define __NR_bpf 280
+#define __NR_execveat 281
+#define __NR_userfaultfd 282
+#define __NR_membarrier 283
+#define __NR_mlock2 284
+#define __NR_copy_file_range 285
+#define __NR_preadv2 286
+#define __NR_pwritev2 287
+#define __NR_pkey_mprotect 288
+#define __NR_pkey_alloc 289
+#define __NR_pkey_free 290
+#define __NR_statx 291
+#define __NR_io_pgetevents 292
+#define __NR_rseq 293
+#define __NR_kexec_file_load 294
+#define __NR_pidfd_send_signal 424
+#define __NR_io_uring_setup 425
+#define __NR_io_uring_enter 426
+#define __NR_io_uring_register 427
+#define __NR_open_tree		428
+#define __NR_move_mount		429
+#define __NR_fsopen		430
+#define __NR_fsconfig		431
+#define __NR_fsmount		432
+#define __NR_fspick		433
+#define __NR_pidfd_open		434
+#define __NR_clone3		435
+#define __NR_close_range	436
+#define __NR_openat2		437
+#define __NR_pidfd_getfd	438
+#define __NR_faccessat2		439
+#define __NR_process_madvise	440
diff --git a/arch/loongarch64/crt_arch.h b/arch/loongarch64/crt_arch.h
new file mode 100644
index 00000000..10b3afb2
--- /dev/null
+++ b/arch/loongarch64/crt_arch.h
@@ -0,0 +1,14 @@
+__asm__(
+".section .sdata,\"aw\"\n"
+".text\n"
+".global " START "\n"
+".type " START ",%function\n"
+START ":\n"
+"move $a5, $a0\n"
+"move $a0, $sp\n"
+".weak _DYNAMIC\n"
+".hidden _DYNAMIC\n\t"
+"la.pcrel $a1, _DYNAMIC\n\t"
+"bstrins.d $sp, $zero, 3, 0\n\t"
+"b " START "_c"
+);
diff --git a/arch/loongarch64/kstat.h b/arch/loongarch64/kstat.h
new file mode 100644
index 00000000..92625f36
--- /dev/null
+++ b/arch/loongarch64/kstat.h
@@ -0,0 +1,21 @@
+struct kstat {
+	dev_t st_dev;
+	ino_t st_ino;
+	mode_t st_mode;
+	nlink_t st_nlink;
+	uid_t st_uid;
+	gid_t st_gid;
+	dev_t st_rdev;
+	unsigned long __pad;
+	off_t st_size;
+	blksize_t st_blksize;
+	int __pad2;
+	blkcnt_t st_blocks;
+	long st_atime_sec;
+	long st_atime_nsec;
+	long st_mtime_sec;
+	long st_mtime_nsec;
+	long st_ctime_sec;
+	long st_ctime_nsec;
+	unsigned __unused[2];
+};
diff --git a/arch/loongarch64/pthread_arch.h b/arch/loongarch64/pthread_arch.h
new file mode 100644
index 00000000..f2513bf4
--- /dev/null
+++ b/arch/loongarch64/pthread_arch.h
@@ -0,0 +1,13 @@
+static inline uintptr_t __get_tp()
+{
+	uintptr_t tp;
+	__asm__ __volatile__("move %0, $tp" : "=r"(tp));
+	return tp;
+}
+
+#define TLS_ABOVE_TP
+#define GAP_ABOVE_TP 0
+
+#define DTP_OFFSET 0x800
+
+#define MC_PC pc
diff --git a/arch/loongarch64/reloc.h b/arch/loongarch64/reloc.h
new file mode 100644
index 00000000..23970ca0
--- /dev/null
+++ b/arch/loongarch64/reloc.h
@@ -0,0 +1,20 @@
+#if defined __loongarch_soft_float
+#define LOONGARCH_FP_SUFFIX "-sf"
+#elif defined __loongarch_hard_float
+#define LOONGARCH_FP_SUFFIX ""
+#endif
+
+#define LDSO_ARCH "loongarch64" LOONGARCH_FP_SUFFIX
+
+#define TPOFF_K 0
+
+#define REL_SYMBOLIC    R_LARCH_64
+#define REL_PLT         R_LARCH_JUMP_SLOT
+#define REL_RELATIVE    R_LARCH_RELATIVE
+#define REL_COPY        R_LARCH_COPY
+#define REL_DTPMOD      R_LARCH_TLS_DTPMOD64
+#define REL_DTPOFF      R_LARCH_TLS_DTPREL64
+#define REL_TPOFF       R_LARCH_TLS_TPREL64
+
+#define CRTJMP(pc,sp) __asm__ __volatile__( \
+	"move $sp, %1 ; jirl $zero, %0, 0" : : "r"(pc), "r"(sp) : "memory" )
diff --git a/arch/loongarch64/syscall_arch.h b/arch/loongarch64/syscall_arch.h
new file mode 100644
index 00000000..75925596
--- /dev/null
+++ b/arch/loongarch64/syscall_arch.h
@@ -0,0 +1,77 @@
+#define __SYSCALL_LL_E(x) (x)
+#define __SYSCALL_LL_O(x) (x)
+
+#define __asm_syscall(...) \
+	__asm__ __volatile__ ("syscall 0\n\t" \
+	: "=r"(a0) : __VA_ARGS__ : "memory"); \
+	return a0; \
+
+static inline long __syscall0(long n)
+{
+	register long a7 __asm__("a7") = n;
+	register long a0 __asm__("a0");
+	__asm_syscall("r"(a7))
+}
+
+static inline long __syscall1(long n, long a)
+{
+	register long a7 __asm__("a7") = n;
+	register long a0 __asm__("a0") = a;
+	__asm_syscall("r"(a7), "0"(a0))
+}
+
+static inline long __syscall2(long n, long a, long b)
+{
+	register long a7 __asm__("a7") = n;
+	register long a0 __asm__("a0") = a;
+	register long a1 __asm__("a1") = b;
+	__asm_syscall("r"(a7), "0"(a0), "r"(a1))
+}
+
+static inline long __syscall3(long n, long a, long b, long c)
+{
+	register long a7 __asm__("a7") = n;
+	register long a0 __asm__("a0") = a;
+	register long a1 __asm__("a1") = b;
+	register long a2 __asm__("a2") = c;
+	__asm_syscall("r"(a7), "0"(a0), "r"(a1), "r"(a2))
+}
+
+static inline long __syscall4(long n, long a, long b, long c, long d)
+{
+	register long a7 __asm__("a7") = n;
+	register long a0 __asm__("a0") = a;
+	register long a1 __asm__("a1") = b;
+	register long a2 __asm__("a2") = c;
+	register long a3 __asm__("a3") = d;
+	__asm_syscall("r"(a7), "0"(a0), "r"(a1), "r"(a2), "r"(a3))
+}
+
+static inline long __syscall5(long n, long a, long b, long c, long d, long e)
+{
+	register long a7 __asm__("a7") = n;
+	register long a0 __asm__("a0") = a;
+	register long a1 __asm__("a1") = b;
+	register long a2 __asm__("a2") = c;
+	register long a3 __asm__("a3") = d;
+	register long a4 __asm__("a4") = e;
+	__asm_syscall("r"(a7), "0"(a0), "r"(a1), "r"(a2), "r"(a3), "r"(a4))
+}
+
+static inline long __syscall6(long n, long a, long b, long c, long d, long e, long f)
+{
+	register long a7 __asm__("a7") = n;
+	register long a0 __asm__("a0") = a;
+	register long a1 __asm__("a1") = b;
+	register long a2 __asm__("a2") = c;
+	register long a3 __asm__("a3") = d;
+	register long a4 __asm__("a4") = e;
+	register long a5 __asm__("a5") = f;
+	__asm_syscall("r"(a7), "0"(a0), "r"(a1), "r"(a2), "r"(a3), "r"(a4), "r"(a5))
+}
+
+#define VDSO_USEFUL
+#define VDSO_CGT_SYM "__vdso_clock_gettime"
+#define VDSO_CGT_VER "LINUX_2.6"
+
+#define IPC_64 0
diff --git a/configure b/configure
index a5231a0e..8cde7bc8 100755
--- a/configure
+++ b/configure
@@ -328,6 +328,7 @@ i?86*) ARCH=i386 ;;
 x86_64-x32*|x32*|x86_64*x32) ARCH=x32 ;;
 x86_64-nt64*) ARCH=nt64 ;;
 x86_64*) ARCH=x86_64 ;;
+loongarch64*) ARCH=loongarch64 ;;
 m68k*) ARCH=m68k ;;
 mips64*|mipsisa64*) ARCH=mips64 ;;
 mips*) ARCH=mips ;;
@@ -650,6 +651,10 @@ if test "$ARCH" = "aarch64" ; then
 trycppif __AARCH64EB__ "$t" && SUBARCH=${SUBARCH}_be
 fi
 
+if test "$ARCH" = "loongarch64" ; then
+trycppif __loongarch_soft_float "$t" && SUBARCH=${SUBARCH}-sf
+fi
+
 if test "$ARCH" = "m68k" ; then
 if trycppif "__HAVE_68881__" ; then : ;
 elif trycppif "__mcffpu__" ; then SUBARCH="-fp64"
diff --git a/include/elf.h b/include/elf.h
index 5170f3e2..cd5bc960 100644
--- a/include/elf.h
+++ b/include/elf.h
@@ -315,7 +315,14 @@ typedef struct {
 #define EM_RISCV	243
 #define EM_BPF		247
 #define EM_CSKY		252
-#define EM_NUM		253
+#define EM_ARC_COMPACT3_64 253
+#define EM_MCS6502	254
+#define EM_ARC_COMPACT3	255
+#define EM_KVX		256
+#define EM_65816	257
+#define EM_LOONGARCH	258
+#define EM_KF32		259
+#define EM_NUM		260
 
 #define EM_ALPHA	0x9026
 
@@ -695,6 +702,10 @@ typedef struct {
 #define NT_MIPS_DSP	0x800
 #define NT_MIPS_FP_MODE	0x801
 #define NT_MIPS_MSA	0x802
+#define NT_LARCH_CPUCFG 0x900
+#define NT_LARCH_LBT    0x901
+#define NT_LARCH_LSX    0x902
+#define NT_LARCH_LASX   0x903
 #define NT_VERSION	1
 
 
@@ -3287,6 +3298,65 @@ enum
 #define R_RISCV_SET32           56
 #define R_RISCV_32_PCREL        57
 
+#define EF_LARCH_ABI            0x0003
+#define EF_LARCH_ABI_LP64       0x0003
+#define EF_LARCH_ABI_XLP32      0x0002
+#define EF_LARCH_ABI_LP32       0x0001
+
+#define R_LARCH_NONE                            0
+#define R_LARCH_32                              1
+#define R_LARCH_64                              2
+#define R_LARCH_RELATIVE                        3
+#define R_LARCH_COPY                            4
+#define R_LARCH_JUMP_SLOT                       5
+#define R_LARCH_TLS_DTPMOD32                    6
+#define R_LARCH_TLS_DTPMOD64                    7
+#define R_LARCH_TLS_DTPREL32                    8
+#define R_LARCH_TLS_DTPREL64                    9
+#define R_LARCH_TLS_TPREL32                     10
+#define R_LARCH_TLS_TPREL64                     11
+#define R_LARCH_IRELATIVE                       12
+#define R_LARCH_MARK_LA                         20
+#define R_LARCH_MARK_PCREL                      21
+#define R_LARCH_SOP_PUSH_PCREL                  22
+#define R_LARCH_SOP_PUSH_ABSOLUTE               23
+#define R_LARCH_SOP_PUSH_DUP                    24
+#define R_LARCH_SOP_PUSH_GPREL                  25
+#define R_LARCH_SOP_PUSH_TLS_TPREL              26
+#define R_LARCH_SOP_PUSH_TLS_GOT                27
+#define R_LARCH_SOP_PUSH_TLS_GD                 28
+#define R_LARCH_SOP_PUSH_PLT_PCREL              29
+#define R_LARCH_SOP_ASSERT                      30
+#define R_LARCH_SOP_NOT                         31
+#define R_LARCH_SOP_SUB                         32
+#define R_LARCH_SOP_SL                          33
+#define R_LARCH_SOP_SR                          34
+#define R_LARCH_SOP_ADD                         35
+#define R_LARCH_SOP_AND                         36
+#define R_LARCH_SOP_IF_ELSE                     37
+#define R_LARCH_SOP_POP_32_S_10_5               38
+#define R_LARCH_SOP_POP_32_U_10_12              39
+#define R_LARCH_SOP_POP_32_S_10_12              40
+#define R_LARCH_SOP_POP_32_S_10_16              41
+#define R_LARCH_SOP_POP_32_S_10_16_S2           42
+#define R_LARCH_SOP_POP_32_S_5_20               43
+#define R_LARCH_SOP_POP_32_S_0_5_10_16_S2       44
+#define R_LARCH_SOP_POP_32_S_0_10_10_16_S2      45
+#define R_LARCH_SOP_POP_32_U                    46
+#define R_LARCH_ADD8                            47
+#define R_LARCH_ADD16                           48
+#define R_LARCH_ADD24                           49
+#define R_LARCH_ADD32                           50
+#define R_LARCH_ADD64                           51
+#define R_LARCH_SUB8                            52
+#define R_LARCH_SUB16                           53
+#define R_LARCH_SUB24                           54
+#define R_LARCH_SUB32                           55
+#define R_LARCH_SUB64                           56
+#define R_LARCH_GNU_VTINHERIT                   57
+#define R_LARCH_GNU_VTENTRY                     58
+
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/fenv/loongarch64/fenv-sf.c b/src/fenv/loongarch64/fenv-sf.c
new file mode 100644
index 00000000..41154673
--- /dev/null
+++ b/src/fenv/loongarch64/fenv-sf.c
@@ -0,0 +1,3 @@
+#ifdef __loongarch_soft_float
+#include "../fenv.c"
+#endif
diff --git a/src/fenv/loongarch64/fenv.S b/src/fenv/loongarch64/fenv.S
new file mode 100644
index 00000000..b0cdd3d8
--- /dev/null
+++ b/src/fenv/loongarch64/fenv.S
@@ -0,0 +1,66 @@
+#ifdef __loongarch_hard_float
+
+.global feclearexcept
+.type feclearexcept, %function
+feclearexcept:
+	andi        $a0, $a0, 0x1f
+	movfcsr2gr  $t0, $r1
+	orn         $t0, $t0, $a0
+	movgr2fcsr  $r1, $t0
+	li          $a0, 0
+	jirl        $zero, $ra, 0
+
+.global feraiseexcept
+.type feraiseexcept, %function
+feraiseexcept:
+	andi        $a0, $a0, 0x1f
+	movfcsr2gr  $t0, $r1
+	or          $t0, $t0, $a0
+	movgr2fcsr  $r1, $t0
+	li          $a0, 0
+	jirl        $zero, $ra, 0
+
+.global fetestexcept
+.type fetestexcept, %function
+fetestexcept:
+	andi        $a0, $a0, 0x1f
+	movfcsr2gr  $t0, $r1
+	and         $a0, $t0, $a0
+	jirl        $zero, $ra, 0
+
+.global fegetround
+.type fegetround, %function
+fegetround:
+	movfcsr2gr  $a0, $r3
+	bstrpick.w  $a0, $a0, 9, 8
+	jirl        $zero, $ra, 0
+
+.global __fesetround
+.type __fesetround, %function
+__fesetround:
+	andi        $a0, $a0, 0x3
+	slli.w      $a0, $a0, 8
+	movgr2fcsr  $r3, $a0
+	li          $a0, 0
+	jirl        $zero, $ra, 0
+
+.global fegetenv
+.type fegetenv, %function
+fegetenv:
+	movfcsr2gr  $t0, $r0
+	st.w        $t0, $a0, 0
+	li          $a0, 0
+	jirl        $zero, $ra, 0
+
+.global fesetenv
+.type fesetenv, %function
+fesetenv:
+	li          $t1, -1
+	li          $t0, 0
+	beq         $a0, $t1, 1f
+	ld.w        $t0, $a0, 0
+1:	movgr2fcsr  $r0, $t0
+	li          $a0, 0
+	jirl        $zero, $ra, 0
+
+#endif
diff --git a/src/ldso/loongarch64/dlsym.s b/src/ldso/loongarch64/dlsym.s
new file mode 100644
index 00000000..f44bd1ce
--- /dev/null
+++ b/src/ldso/loongarch64/dlsym.s
@@ -0,0 +1,6 @@
+.global dlsym
+.hidden __dlsym
+.type dlsym, %function
+dlsym:
+	move $a2, $ra
+	b __dlsym
diff --git a/src/math/loongarch64/copysign.c b/src/math/loongarch64/copysign.c
new file mode 100644
index 00000000..8e959e2e
--- /dev/null
+++ b/src/math/loongarch64/copysign.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 64
+
+double copysign(double x, double y)
+{
+	__asm__ ("fcopysign.d %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../copysign.c"
+
+#endif
diff --git a/src/math/loongarch64/copysignf.c b/src/math/loongarch64/copysignf.c
new file mode 100644
index 00000000..2816da4b
--- /dev/null
+++ b/src/math/loongarch64/copysignf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 32
+
+float copysignf(float x, float y)
+{
+	__asm__ ("fcopysign.s %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../copysignf.c"
+
+#endif
diff --git a/src/math/loongarch64/fabs.c b/src/math/loongarch64/fabs.c
new file mode 100644
index 00000000..49f5124d
--- /dev/null
+++ b/src/math/loongarch64/fabs.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 64
+
+double fabs(double x)
+{
+	__asm__ ("fabs.d %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../fabs.c"
+
+#endif
diff --git a/src/math/loongarch64/fabsf.c b/src/math/loongarch64/fabsf.c
new file mode 100644
index 00000000..05993bb3
--- /dev/null
+++ b/src/math/loongarch64/fabsf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 32
+
+float fabsf(float x)
+{
+	__asm__ ("fabs.s %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../fabsf.c"
+
+#endif
diff --git a/src/math/loongarch64/fma.c b/src/math/loongarch64/fma.c
new file mode 100644
index 00000000..0af78160
--- /dev/null
+++ b/src/math/loongarch64/fma.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 64
+
+double fma(double x, double y, double z)
+{
+	__asm__ ("fmadd.d %0, %1, %2, %3" : "=f"(x) : "f"(x), "f"(y), "f"(z));
+	return x;
+}
+
+#else
+
+#include "../fma.c"
+
+#endif
diff --git a/src/math/loongarch64/fmaf.c b/src/math/loongarch64/fmaf.c
new file mode 100644
index 00000000..52a858a0
--- /dev/null
+++ b/src/math/loongarch64/fmaf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 32
+
+float fmaf(float x, float y, float z)
+{
+	__asm__ ("fmadd.s %0, %1, %2, %3" : "=f"(x) : "f"(x), "f"(y), "f"(z));
+	return x;
+}
+
+#else
+
+#include "../fmaf.c"
+
+#endif
diff --git a/src/math/loongarch64/fmax.c b/src/math/loongarch64/fmax.c
new file mode 100644
index 00000000..91dae22b
--- /dev/null
+++ b/src/math/loongarch64/fmax.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 64
+
+double fmax(double x, double y)
+{
+	__asm__ ("fmax.d %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fmax.c"
+
+#endif
diff --git a/src/math/loongarch64/fmaxf.c b/src/math/loongarch64/fmaxf.c
new file mode 100644
index 00000000..3d4dcff4
--- /dev/null
+++ b/src/math/loongarch64/fmaxf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 32
+
+float fmaxf(float x, float y)
+{
+	__asm__ ("fmax.s %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fmaxf.c"
+
+#endif
diff --git a/src/math/loongarch64/fmin.c b/src/math/loongarch64/fmin.c
new file mode 100644
index 00000000..bf06353f
--- /dev/null
+++ b/src/math/loongarch64/fmin.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 64
+
+double fmin(double x, double y)
+{
+	__asm__ ("fmin.d %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fmin.c"
+
+#endif
diff --git a/src/math/loongarch64/fminf.c b/src/math/loongarch64/fminf.c
new file mode 100644
index 00000000..60059c6f
--- /dev/null
+++ b/src/math/loongarch64/fminf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 32
+
+float fminf(float x, float y)
+{
+	__asm__ ("fmin.s %0, %1, %2" : "=f"(x) : "f"(x), "f"(y));
+	return x;
+}
+
+#else
+
+#include "../fminf.c"
+
+#endif
diff --git a/src/math/loongarch64/sqrt.c b/src/math/loongarch64/sqrt.c
new file mode 100644
index 00000000..12ffc34f
--- /dev/null
+++ b/src/math/loongarch64/sqrt.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 64
+
+double sqrt(double x)
+{
+	__asm__ ("fsqrt.d %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../sqrt.c"
+
+#endif
diff --git a/src/math/loongarch64/sqrtf.c b/src/math/loongarch64/sqrtf.c
new file mode 100644
index 00000000..700682a9
--- /dev/null
+++ b/src/math/loongarch64/sqrtf.c
@@ -0,0 +1,15 @@
+#include <math.h>
+
+#if __loongarch_fpr >= 32
+
+float sqrtf(float x)
+{
+	__asm__ ("fsqrt.s %0, %1" : "=f"(x) : "f"(x));
+	return x;
+}
+
+#else
+
+#include "../sqrtf.c"
+
+#endif
diff --git a/src/setjmp/loongarch64/longjmp.S b/src/setjmp/loongarch64/longjmp.S
new file mode 100644
index 00000000..38647fe3
--- /dev/null
+++ b/src/setjmp/loongarch64/longjmp.S
@@ -0,0 +1,38 @@
+.global __longjmp
+.global _longjmp
+.global longjmp
+.type __longjmp, %function
+.type _longjmp,  %function
+.type longjmp,   %function
+__longjmp:
+_longjmp:
+longjmp:
+	ld.d  $ra,  $a0, 0
+	ld.d  $tp,  $a0, 8
+	ld.d  $sp,  $a0, 16
+	ld.d  $r21, $a0, 24
+	ld.d  $fp,  $a0, 32
+	ld.d  $s0,  $a0, 40
+	ld.d  $s1,  $a0, 48
+	ld.d  $s2,  $a0, 56
+	ld.d  $s3,  $a0, 64
+	ld.d  $s4,  $a0, 72
+	ld.d  $s5,  $a0, 80
+	ld.d  $s6,  $a0, 88
+	ld.d  $s7,  $a0, 96
+	ld.d  $s8,  $a0, 104
+
+#ifdef __loongarch_hard_float
+	fld.d $fs0, $a0, 112
+	fld.d $fs1, $a0, 120
+	fld.d $fs2, $a0, 128
+	fld.d $fs3, $a0, 136
+	fld.d $fs4, $a0, 144
+	fld.d $fs5, $a0, 152
+	fld.d $fs6, $a0, 160
+	fld.d $fs7, $a0, 168
+#endif
+
+	sltui $a0, $a1, 1
+	add.d $a0, $a0, $a1
+	jirl $zero, $ra, 0
diff --git a/src/setjmp/loongarch64/setjmp.S b/src/setjmp/loongarch64/setjmp.S
new file mode 100644
index 00000000..eb668aba
--- /dev/null
+++ b/src/setjmp/loongarch64/setjmp.S
@@ -0,0 +1,37 @@
+.global __setjmp
+.global _setjmp
+.global setjmp
+.type __setjmp, %function
+.type _setjmp,  %function
+.type setjmp,   %function
+__setjmp:
+_setjmp:
+setjmp:
+	st.d  $ra,  $a0, 0
+	st.d  $tp,  $a0, 8
+	st.d  $sp,  $a0, 16
+	st.d  $r21, $a0, 24
+	st.d  $fp,  $a0, 32
+	st.d  $s0,  $a0, 40
+	st.d  $s1,  $a0, 48
+	st.d  $s2,  $a0, 56
+	st.d  $s3,  $a0, 64
+	st.d  $s4,  $a0, 72
+	st.d  $s5,  $a0, 80
+	st.d  $s6,  $a0, 88
+	st.d  $s7,  $a0, 96
+	st.d  $s8,  $a0, 104
+
+#ifdef __loongarch_hard_float
+	fst.d $fs0, $a0, 112
+	fst.d $fs1, $a0, 120
+	fst.d $fs2, $a0, 128
+	fst.d $fs3, $a0, 136
+	fst.d $fs4, $a0, 144
+	fst.d $fs5, $a0, 152
+	fst.d $fs6, $a0, 160
+	fst.d $fs7, $a0, 168
+#endif
+
+	li $a0, 0
+	jirl $zero, $ra, 0
diff --git a/src/thread/loongarch64/__set_thread_area.s b/src/thread/loongarch64/__set_thread_area.s
new file mode 100644
index 00000000..bd1ab2fa
--- /dev/null
+++ b/src/thread/loongarch64/__set_thread_area.s
@@ -0,0 +1,6 @@
+.global __set_thread_area
+.type   __set_thread_area, %function
+__set_thread_area:
+	move $tp, $a0
+	li $a0, 0
+	jirl $zero, $ra, 0
diff --git a/src/thread/loongarch64/__unmapself.s b/src/thread/loongarch64/__unmapself.s
new file mode 100644
index 00000000..c219367f
--- /dev/null
+++ b/src/thread/loongarch64/__unmapself.s
@@ -0,0 +1,7 @@
+.global __unmapself
+.type __unmapself, %function
+__unmapself:
+	li $a7, 215 # SYS_munmap
+	syscall 0
+	li $a7, 93  # SYS_exit
+	syscall 0
diff --git a/src/thread/loongarch64/clone.s b/src/thread/loongarch64/clone.s
new file mode 100644
index 00000000..5499c15c
--- /dev/null
+++ b/src/thread/loongarch64/clone.s
@@ -0,0 +1,34 @@
+# __clone(func, stack, flags, arg, ptid, tls, ctid)
+#           a0,    a1,    a2,  a3,   a4,  a5,   a6
+
+# syscall(SYS_clone, flags, stack, ptid, tls, ctid)
+#                a7     a0,    a1,   a2,  a3,   a4
+
+.global __clone
+.type  __clone, %function
+__clone:
+	# Save func and arg to stack
+	addi.d $a1, $a1, -16
+	st.d $a0, $a1, 0
+	st.d $a3, $a1, 8
+
+	# Call SYS_clone
+	move $a0, $a2
+	move $a2, $a4
+	move $a3, $a5
+	move $a4, $a6
+	li $a7, 220 # SYS_clone
+	syscall 0
+
+	beqz $a0, 1f
+	# Parent
+	jirl $zero, $ra, 0
+
+	# Child
+1:      ld.d $a1, $sp, 0
+	ld.d $a0, $sp, 8
+	jirl $ra, $a1, 0
+
+	# Exit
+	li $a7, 93 # SYS_exit
+	syscall 0
diff --git a/src/thread/loongarch64/syscall_cp.s b/src/thread/loongarch64/syscall_cp.s
new file mode 100644
index 00000000..7de6dd25
--- /dev/null
+++ b/src/thread/loongarch64/syscall_cp.s
@@ -0,0 +1,29 @@
+.global __cp_begin
+.hidden __cp_begin
+.global __cp_end
+.hidden __cp_end
+.global __cp_cancel
+.hidden __cp_cancel
+.hidden __cancel
+.global __syscall_cp_asm
+.hidden __syscall_cp_asm
+.type __syscall_cp_asm, %function
+__syscall_cp_asm:
+__cp_begin:
+	ld.w $t0, $a0, 0
+	bnez $t0, __cp_cancel
+
+	move $t0, $a1
+	move $a0, $a2
+	move $a1, $a3
+	move $a2, $a4
+	move $a3, $a5
+	move $a4, $a6
+	move $a5, $a7
+	ld.d $a6, $sp, 0
+	move $a7, $t0
+	syscall 0
+__cp_end:
+	jirl $zero, $ra, 0
+__cp_cancel:
+	b __cancel
-- 
2.30.1

